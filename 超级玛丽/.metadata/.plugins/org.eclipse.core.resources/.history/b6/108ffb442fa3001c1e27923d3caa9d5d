package superMary;

import java.awt.image.BufferedImage;

public class Mario implements Runnable{
	//马里奥的坐标
   private int x;
   private int y;
   //用于表示当前状态
   private String status;
   //用于显示当前状态对应的图片
   private BufferedImage show=null;
   //定义一个background对象，用于获取障碍物对象
   private background backGround=new background();
   //用来实现马里奥的动作
   private Thread thread=null;
   //马里奥的移动速度
   private int xspeed;
   //马里奥的跳跃速度
   private int yspeed;
   //定义一个索引
   private int index;
   public Mario()
   {
	   
   }
   public Mario(int x,int y)
   {
	   this.x=x;
	   this.y=y;
	   status="stand-right";
	   show=StaticValue.stand_right;
	   thread=new Thread(this);
	   thread.start();
	   
   }
   
   //马里奥向左移动
   public void leftMove() {
       //改变速度
       xspeed = -5;
       //判断马里奥是否处于空中
       if (status.indexOf("jump") != -1) {
           status = "jump--left";
       }else {
           status = "move--left";
       }
   }

   //马里奥向右移动
   public void rightMove() {
       xspeed = 5;
       if (status.indexOf("jump") != -1) {
           status = "jump--right";
       }else {
           status = "move--right";
       }
   }

   //马里奥向左停止
   public void leftStop() {
       xspeed = 0;
       if (status.indexOf("jump") != -1) {
           status = "jump--left";
       }else {
           status = "stop--left";
       }
   }

   //马里奥向右停止
   public void rightStop() {
       xspeed = 0;
       if (status.indexOf("jump") != -1) {
           status = "jump--right";
       }else {
           status = "stop--right";
       }
   }
   @Override
public void run() 
  {
	   while (true) {
           if (xspeed < 0 || xspeed > 0) {
               x += xspeed;
               //判断马里奥是否到了最左边
               if (x < 0) {
                   x = 0;
               }
           }
           //判断当前是否是移动状态
           if (status.contains("move")) {
               index = index == 0 ? 1 : 0;
           }
           //判断是否向左移动
           if ("move--left".equals(status)) {
               show = StaticValue.run_left.get(index);
           }
           //判断是否向右移动
           if ("move--right".equals(status)) {
               show = StaticValue.run_right.get(index);
           }
           //判断是否向左停止
           if ("stop--left".equals(status)) {
               show = StaticValue.stand_left;
           }

           //判断是否向右停止
           if ("stop--right".equals(status)) {
               show = StaticValue.stand_right;
           }

           try {
               Thread.sleep(50);
           } catch (InterruptedException e) {
               e.printStackTrace();
           }


       }
  }
   public int getX()
   {
	   return x;
   }
   public void setX(int x)
   {
	   this.x=x;
   }
   public int getY()
   {
	   return y;
   }
   public void setY(int y)
   {
	   this.y=y;
   }
   public BufferedImage getShow()
   {
	   return show;
   }
   public void setShow(BufferedImage show)
   {
	   this.show=show;
   }
   public void setBackground(background bg)
   {
	   this.backGround=bg;
   }
  }
